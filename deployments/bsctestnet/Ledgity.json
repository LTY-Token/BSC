{
  "address": "0x525957f0bc0ff79FB010b8576d5B6B33D8972F92",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyAccumulationFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDestination",
      "outputs": [
        {
          "internalType": "enum Ledgity.FeeDestination",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "firstSellAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDexes",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExcluded",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExcludedFromDexFee",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExcludedFromLimits",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inSwapAndLiquify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialBuyAccumulationFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialSellAccumulationFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialSellAtSmallPriceAccumulationFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialSellReflectionFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceOracleAddress",
          "type": "address"
        }
      ],
      "name": "initializePriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserveAddress",
          "type": "address"
        }
      ],
      "name": "initializeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isDex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcluded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromDexFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromLimits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTransactionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTransactionSizePercent",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTokensToSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract ILedgityPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        }
      ],
      "name": "reflect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deductTransferFee",
          "type": "bool"
        }
      ],
      "name": "reflectionFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "contract IReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellAccumulationFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellAtSmallPriceAccumulationFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellReflectionFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "setBuyAccumulationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "dex",
          "type": "bool"
        }
      ],
      "name": "setDex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Ledgity.FeeDestination",
          "name": "fd",
          "type": "uint8"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        }
      ],
      "name": "setInitialPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isExcluded",
          "type": "bool"
        }
      ],
      "name": "setIsExcludedFromDexFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isExcluded",
          "type": "bool"
        }
      ],
      "name": "setIsExcludedFromLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "setMaxTransactionSizePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numTokensToSwap",
          "type": "uint256"
        }
      ],
      "name": "setNumTokensToSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "setSellAccumulationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "setSellAtSmallPriceAccumulationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "setSellReflectionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "soldPerPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenFromReflection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x68859bfe1cf7b9cc97cd5b10db0ca3508668960b935af9430fb0d7614e91b59a",
  "receipt": {
    "to": null,
    "from": "0xc28Bf645b0ae0605747283A80553d54201D31544",
    "contractAddress": "0x525957f0bc0ff79FB010b8576d5B6B33D8972F92",
    "transactionIndex": 4,
    "gasUsed": "3725319",
    "logsBloom": "0x
    "blockHash": "0x248ec57bc04021f7467cfc4b298dac5f0036f62ad13761c8ad6ada8ddbd41fc1",
    "transactionHash": "0x68859bfe1cf7b9cc97cd5b10db0ca3508668960b935af9430fb0d7614e91b59a",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 12125831,
        "transactionHash": "0x68859bfe1cf7b9cc97cd5b10db0ca3508668960b935af9430fb0d7614e91b59a",
        "address": "0x525957f0bc0ff79FB010b8576d5B6B33D8972F92",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c28bf645b0ae0605747283a80553d54201d31544"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x248ec57bc04021f7467cfc4b298dac5f0036f62ad13761c8ad6ada8ddbd41fc1"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 12125831,
        "transactionHash": "0x68859bfe1cf7b9cc97cd5b10db0ca3508668960b935af9430fb0d7614e91b59a",
        "address": "0x525957f0bc0ff79FB010b8576d5B6B33D8972F92",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c28bf645b0ae0605747283a80553d54201d31544"
        ],
        "data": "0x000000000000000000000000000000000000000008eb04bbcd9161efc8000000",
        "logIndex": 11,
        "blockHash": "0x248ec57bc04021f7467cfc4b298dac5f0036f62ad13761c8ad6ada8ddbd41fc1"
      }
    ],
    "blockNumber": 12125831,
    "cumulativeGasUsed": "4346290",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "159d2484a4d183a28d3a422c30be69ae",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDestination\",\"outputs\":[{\"internalType\":\"enum Ledgity.FeeDestination\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstSellAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDexes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcluded\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedFromDexFee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedFromLimits\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBuyAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSellAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSellAtSmallPriceAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSellReflectionFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceOracleAddress\",\"type\":\"address\"}],\"name\":\"initializePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserveAddress\",\"type\":\"address\"}],\"name\":\"initializeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDexFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionSizePercent\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract ILedgityPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAtSmallPriceAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReflectionFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setBuyAccumulationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"dex\",\"type\":\"bool\"}],\"name\":\"setDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Ledgity.FeeDestination\",\"name\":\"fd\",\"type\":\"uint8\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromDexFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setMaxTransactionSizePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensToSwap\",\"type\":\"uint256\"}],\"name\":\"setNumTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setSellAccumulationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setSellAtSmallPriceAccumulationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setSellReflectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"soldPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ledgity.sol\":\"Ledgity\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ledgity.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"./libraries/ReflectToken.sol\\\";\\nimport \\\"./libraries/Percent.sol\\\";\\nimport \\\"./libraries/Set.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/ILedgity.sol\\\";\\nimport \\\"./interfaces/IReserve.sol\\\";\\nimport \\\"./interfaces/ILedgityPriceOracle.sol\\\";\\n\\n// SPDX-License-Identifier: Unlicensed\\ncontract Ledgity is ILedgity, ReflectToken {\\n    using SafeMath for uint256;\\n    using Percent for Percent.Percent;\\n    using Set for Set.AddressSet;\\n\\n    uint256 public constant initialTotalSupply = 2760000000 * 10**18;\\n\\n    uint256 public numTokensToSwap;\\n    bool public inSwapAndLiquify;\\n    enum FeeDestination {\\n        Liquify,\\n        Collect\\n    }\\n    FeeDestination public feeDestination = FeeDestination.Liquify;\\n    Percent.Percent public sellAccumulationFee = Percent.encode(6, 100);\\n    Percent.Percent public initialSellAccumulationFee = sellAccumulationFee;\\n    Percent.Percent public sellAtSmallPriceAccumulationFee = Percent.encode(6 + 15, 100);\\n    Percent.Percent public initialSellAtSmallPriceAccumulationFee = sellAtSmallPriceAccumulationFee;\\n    Percent.Percent public sellReflectionFee = Percent.encode(4, 100);\\n    Percent.Percent public initialSellReflectionFee = sellReflectionFee;\\n    Percent.Percent public buyAccumulationFee = Percent.encode(4, 100);\\n    Percent.Percent public initialBuyAccumulationFee = buyAccumulationFee;\\n    Set.AddressSet private _dexes;\\n    Set.AddressSet private _excludedFromDexFee;\\n\\n    Set.AddressSet private _excludedFromLimits;\\n    mapping(address => uint256) public soldPerPeriod;\\n    mapping(address => uint256) public firstSellAt;\\n    Percent.Percent public maxTransactionSizePercent = Percent.encode(5, 10000);\\n\\n    IUniswapV2Pair public uniswapV2Pair;\\n    IReserve public reserve;\\n    ILedgityPriceOracle public priceOracle;\\n    uint256 public initialPrice;\\n\\n    constructor() public ReflectToken(\\\"Ledgity\\\", \\\"LTY\\\", initialTotalSupply) {\\n        numTokensToSwap = totalSupply().mul(15).div(10000);\\n        setIsExcludedFromDexFee(owner(), true);\\n        setIsExcludedFromDexFee(address(this), true);\\n        setIsExcludedFromLimits(owner(), true);\\n        setIsExcludedFromLimits(address(this), true);\\n        excludeAccount(address(this));\\n    }\\n\\n    modifier lockTheSwap {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    function initializeReserve(address reserveAddress) external onlyOwner {\\n        reserve = IReserve(reserveAddress);\\n        setIsExcludedFromDexFee(address(reserve), true);\\n        setIsExcludedFromLimits(address(reserve), true);\\n        excludeAccount(address(reserve));\\n        uniswapV2Pair = reserve.uniswapV2Pair();\\n        setDex(address(uniswapV2Pair), true);\\n    }\\n\\n    function initializePriceOracle(address priceOracleAddress) external onlyOwner {\\n        priceOracle = ILedgityPriceOracle(priceOracleAddress);\\n    }\\n\\n    function totalBurn() external view returns (uint256) {\\n        return initialTotalSupply - totalSupply();\\n    }\\n\\n    function setDex(address target, bool dex) public onlyOwner {\\n        if (dex) {\\n            _dexes.add(target);\\n            if (!isExcluded(target)) {\\n                excludeAccount(target);\\n            }\\n        } else {\\n            _dexes.remove(target);\\n            if (isExcluded(target)) {\\n                includeAccount(target);\\n            }\\n        }\\n    }\\n\\n    function setInitialPrice(uint256 _initialPrice) public onlyOwner {\\n        initialPrice = _initialPrice;\\n    }\\n\\n    function setFeeDestination(FeeDestination fd) public onlyOwner {\\n        feeDestination = fd;\\n    }\\n\\n    function setIsExcludedFromDexFee(address account, bool isExcluded) public onlyOwner {\\n        if (isExcluded) {\\n            _excludedFromDexFee.add(account);\\n        } else {\\n            _excludedFromDexFee.remove(account);\\n        }\\n    }\\n\\n    function setIsExcludedFromLimits(address account, bool isExcluded) public onlyOwner {\\n        if (isExcluded) {\\n            _excludedFromLimits.add(account);\\n        } else {\\n            _excludedFromLimits.remove(account);\\n        }\\n    }\\n\\n    function setNumTokensToSwap(uint256 _numTokensToSwap) external onlyOwner {\\n        numTokensToSwap = _numTokensToSwap;\\n    }\\n\\n    function setMaxTransactionSizePercent(uint128 numerator, uint128 denominator) external onlyOwner {\\n        maxTransactionSizePercent = Percent.encode(numerator, denominator);\\n    }\\n\\n    function setSellAccumulationFee(uint128 numerator, uint128 denominator) external onlyOwner {\\n        sellAccumulationFee = Percent.encode(numerator, denominator);\\n        require(sellAccumulationFee.lte(initialSellAccumulationFee), \\\"Ledgity: fee too high\\\");\\n    }\\n\\n    function setSellAtSmallPriceAccumulationFee(uint128 numerator, uint128 denominator) external onlyOwner {\\n        sellAtSmallPriceAccumulationFee = Percent.encode(numerator, denominator);\\n        require(sellAtSmallPriceAccumulationFee.lte(initialSellAtSmallPriceAccumulationFee), \\\"Ledgity: fee too high\\\");\\n    }\\n\\n    function setSellReflectionFee(uint128 numerator, uint128 denominator) external onlyOwner {\\n        sellReflectionFee = Percent.encode(numerator, denominator);\\n        require(sellReflectionFee.lte(initialSellReflectionFee), \\\"Ledgity: fee too high\\\");\\n    }\\n\\n    function setBuyAccumulationFee(uint128 numerator, uint128 denominator) external onlyOwner {\\n        buyAccumulationFee = Percent.encode(numerator, denominator);\\n        require(buyAccumulationFee.lte(initialBuyAccumulationFee), \\\"Ledgity: fee too high\\\");\\n    }\\n\\n    function burn(uint256 amount) external override returns (bool) {\\n        _burn(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    function getDexes() external view returns (address[] memory) {\\n        return _dexes.values;\\n    }\\n\\n    function getExcludedFromDexFee() external view returns (address[] memory) {\\n        return _excludedFromDexFee.values;\\n    }\\n\\n    function getExcludedFromLimits() external view returns (address[] memory) {\\n        return _excludedFromLimits.values;\\n    }\\n\\n    function isDex(address account) public view returns (bool) {\\n        return _dexes.has(account);\\n    }\\n\\n    function isExcludedFromDexFee(address account) public view returns (bool) {\\n        return _excludedFromDexFee.has(account);\\n    }\\n\\n    function isExcludedFromLimits(address account) public view returns (bool) {\\n        return _excludedFromLimits.has(account);\\n    }\\n\\n    function _calculateReflectionFee(address sender, address recipient, uint256 amount) internal override view returns (uint256) {\\n        if (isDex(recipient) && !isExcludedFromDexFee(sender)) {\\n            return sellReflectionFee.mul(amount);\\n        }\\n        return 0;\\n    }\\n\\n    function _calculateAccumulationFee(address sender, address recipient, uint256 amount) internal override view returns (uint256) {\\n        if (isDex(sender) && !isExcludedFromDexFee(recipient)) {\\n            return buyAccumulationFee.mul(amount);\\n        }\\n        if (isDex(recipient) && !isExcludedFromDexFee(sender)) {\\n            if (_getPrice() >= initialPrice.mul(10)) {\\n                return sellAccumulationFee.mul(amount);\\n            } else {\\n                return sellAtSmallPriceAccumulationFee.mul(amount);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function _swapAndLiquifyOrCollect(uint256 contractTokenBalance) private lockTheSwap {\\n        _transfer(address(this), address(reserve), contractTokenBalance);\\n        if (feeDestination == FeeDestination.Liquify) {\\n            reserve.swapAndLiquify(contractTokenBalance);\\n        } else if (feeDestination == FeeDestination.Collect) {\\n            reserve.swapAndCollect(contractTokenBalance);\\n        } else {\\n            revert(\\\"Ledgity: invalid feeDestination\\\");\\n        }\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\n        if (!isExcludedFromLimits(sender) && isDex(recipient)) {\\n            uint256 _sold;\\n            if (block.timestamp.sub(firstSellAt[sender]) > 10 minutes) {\\n                // _sold = 0;  // is already 0\\n                firstSellAt[sender] = block.timestamp;\\n            } else {\\n                _sold = soldPerPeriod[sender];\\n            }\\n            _sold = _sold.add(amount);\\n            require(_sold <= maxTransactionSize());\\n            soldPerPeriod[sender] = _sold;\\n        }\\n\\n        if (address(priceOracle) != address(0)) {\\n            priceOracle.tryUpdate();\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        uint256 _numTokensToSwap = numTokensToSwap;\\n        if (\\n            contractTokenBalance >= _numTokensToSwap &&\\n            !inSwapAndLiquify &&\\n            sender != address(uniswapV2Pair)\\n        ) {\\n            if (contractTokenBalance > _numTokensToSwap) {\\n                contractTokenBalance = _numTokensToSwap;\\n            }\\n            _swapAndLiquifyOrCollect(contractTokenBalance);\\n        }\\n\\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n    function _getPrice() private view returns (uint256) {\\n        if (address(priceOracle) == address(0)) {\\n            return 0;\\n        }\\n        return priceOracle.consult(address(this), 1e18);\\n    }\\n\\n    function maxTransactionSize() public view returns (uint256) {\\n        return maxTransactionSizePercent.mul(totalSupply());\\n    }\\n}\\n\",\"keccak256\":\"0x6f2d3a2d3b27f40184725b1c37dfdca045c51d8e4ef79f7699f3dfe35486d5de\",\"license\":\"Unlicensed\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x98cb90765f215549fa80f4ecab5207457dc75ef2e17957954cc1ff02a6ace246\"},\"contracts/interfaces/ILedgity.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\ninterface ILedgity is IERC20 {\\n    function burn(uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd455fa7d57ffe53f62d78cb3d93e82eee2a3fbab373b4ebe81a1567d23452ae7\"},\"contracts/interfaces/ILedgityPriceOracle.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface ILedgityPriceOracle {\\n    /**\\n     * @dev Update average price.\\n     * @return `true` if update successful; `false` if period has not yet elapsed.\\n     */\\n    function tryUpdate() external returns (bool);\\n\\n    /**\\n     * @dev Update average price. Reverts if period has not yet elapsed.\\n     */\\n    function update() external;\\n\\n    /**\\n     * @dev Returns the price of tokens.\\n     */\\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\\n}\\n\",\"keccak256\":\"0x67a5efed708fe394fb97ad517b932658ff61b0a241fcc87566268befa99dbd6b\"},\"contracts/interfaces/IReserve.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\n\\ninterface IReserve {\\n    function uniswapV2Pair() external returns (IUniswapV2Pair);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function swapAndCollect(uint256 tokenAmount) external;\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function swapAndLiquify(uint256 tokenAmount) external;\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function buyAndBurn(uint256 usdcAmount) external;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event BuyAndBurn(uint256 tokenAmount, uint256 usdcAmount);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event SwapAndCollect(uint256 tokenAmount, uint256 usdcAmount);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event SwapAndLiquify(\\n        uint256 tokenSwapped,\\n        uint256 usdcReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n}\\n\",\"keccak256\":\"0x98c4e10b14384e7c2e45ea15b90a78da7090d8421df04ce13bf445810d0ea907\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xc869b21c0a9bc523f2ddd09beb3fdae79b37eac49ed5a6fe1d4a55d919f613bf\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xd66ffba293ecbcb52d6b60c584c5f2c9d93f9f6001001635e2c06a7db973f3a2\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xc754e33b863705e24f8dce40cd705bdf5e1b81095952829773eca06ef4b66138\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2b5582e3f17b222653009f6910f65a4c55b7e3a08e5f5cbc94ea301a6efed8ed\"},\"contracts/libraries/Context.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa8ed5bc722107d4edef25a726d5c120e7f53a97b689f7e401093efcd921c286b\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\n\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () public {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4b156282d021c0245e499de14e6f6c6f1472d2d6f33a4888dd6adad8337d65ff\"},\"contracts/libraries/Percent.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\nlibrary Percent {\\n    using SafeMath for uint256;\\n\\n    struct Percent {\\n        uint128 numerator;\\n        uint128 denominator;\\n    }\\n\\n    function encode(uint128 numerator, uint128 denominator) internal pure returns (Percent memory) {\\n        require(numerator <= denominator, \\\"Percent: invalid percentage\\\");\\n        return Percent(numerator, denominator);\\n    }\\n\\n    function mul(Percent memory self, uint256 value) internal pure returns (uint256) {\\n        return value.mul(uint256(self.numerator)).div(uint256(self.denominator));\\n    }\\n\\n    function lte(Percent memory self, Percent memory other) internal pure returns (bool) {\\n        return uint256(self.numerator).mul(other.denominator) <= uint256(other.numerator).mul(self.denominator);\\n    }\\n}\\n\",\"keccak256\":\"0x2debd92dbf7b465ec998e5aeb567be533c4712632c880670df8cf74f12566c7a\"},\"contracts/libraries/ReflectToken.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract ReflectToken is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    mapping (address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    uint8 private constant _decimals = 18;\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor (string memory name_, string memory symbol_, uint256 tTotal_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _tTotal = tTotal_;\\n        uint256 MAX = type(uint256).max;\\n        _rTotal = (MAX - (MAX % _tTotal));\\n        _rOwned[_msgSender()] = _rTotal;\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    /**\\n     * @dev Amount of tokens to be charged as a reflection fee. Must be in range 0..amount.\\n     */\\n    function _calculateReflectionFee(address sender, address recipient, uint256 amount) internal virtual view returns (uint256);\\n\\n    /**\\n     * @dev Amount of tokens to be charged and stored in this contract. Must be in range 0..amount.\\n     */\\n    function _calculateAccumulationFee(address sender, address recipient, uint256 amount) internal virtual view returns (uint256);\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ReflectToken: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ReflectToken: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function getExcluded() external view returns (address[] memory) {\\n        return _excluded;\\n    }\\n\\n    function isExcluded(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function totalFees() external view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function reflect(uint256 tAmount) external {\\n        address sender = _msgSender();\\n        require(!_isExcluded[sender], \\\"ReflectToken: excluded addresses cannot call this function\\\");\\n        (uint256 rAmount,,,,,,) = _getValues(sender, address(0), tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rTotal = _rTotal.sub(rAmount);\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\\n        require(tAmount <= _tTotal, \\\"ReflectToken: amount must be less than supply\\\");\\n        address sender = _msgSender();\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,,,) = _getValues(sender, address(0), tAmount);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,,,) = _getValues(sender, address(0), tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"ReflectToken: amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeAccount(address account) public onlyOwner() {\\n        require(!_isExcluded[account], \\\"ReflectToken: account is already excluded\\\");\\n        if(_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeAccount(address account) public onlyOwner() {\\n        require(_isExcluded[account], \\\"ReflectToken: account is already included\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ReflectToken: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ReflectToken: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _burn(address from, uint256 tAmount) internal {\\n        uint256 rAmount = tAmount.mul(_getRate());\\n        _rOwned[from] = _rOwned[from].sub(rAmount, \\\"ReflectToken: burn amount is more than the balance\\\");\\n        if (_isExcluded[from]) {\\n            _tOwned[from] = _tOwned[from].sub(tAmount, \\\"ReflectToken: burn amount is more than the balance\\\");\\n        }\\n\\t\\t_rTotal = _rTotal.sub(rAmount);\\n\\t\\t_tTotal = _tTotal.sub(tAmount);\\n        emit Transfer(_msgSender(), address(0), tAmount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 tAmount) internal virtual {\\n        require(sender != address(0), \\\"ReflectToken: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ReflectToken: transfer to the zero address\\\");\\n        require(tAmount > 0, \\\"ReflectToken: transfer amount must be greater than zero\\\");\\n\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rAccumulation, uint256 tTransferAmount, uint256 tFee, uint256 tAccumulation) = _getValues(sender, recipient, tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        if (_isExcluded[sender]) {\\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        }\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        if (_isExcluded[recipient]) {\\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        }\\n        if (tFee != 0) {\\n            _reflectFee(rFee, tFee);\\n        }\\n        if (tAccumulation != 0) {\\n            _accumulateFee(rAccumulation, tAccumulation);\\n        }\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _accumulateFee(uint256 rAccumulation, uint256 tAccumulation) private {\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rAccumulation);\\n        if(_isExcluded[address(this)]) {\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tAccumulation);\\n        }\\n    }\\n\\n    function _getValues(address sender, address recipient, uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tAccumulation) = _getTValues(sender, recipient, tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rAccumulation) = _getRValues(tAmount, tFee, tAccumulation);\\n        return (rAmount, rTransferAmount, rFee, rAccumulation, tTransferAmount, tFee, tAccumulation);\\n    }\\n\\n    function _getTValues(address sender, address recipient, uint256 tAmount) private view returns (uint256, uint256, uint256) {\\n        uint256 tFee = _calculateReflectionFee(sender, recipient, tAmount);\\n        uint256 tAccumulation = _calculateAccumulationFee(sender, recipient, tAmount);\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tAccumulation);\\n        return (tTransferAmount, tFee, tAccumulation);\\n    }\\n\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tAccumulation) private view returns (uint256, uint256, uint256, uint256) {\\n        uint256 currentRate = _getRate();\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rAccumulation = tAccumulation.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rAccumulation);\\n        return (rAmount, rTransferAmount, rFee, rAccumulation);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        uint256 len = _excluded.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address account = _excluded[i];\\n            uint256 rBalance = _rOwned[account];\\n            uint256 tBalance = _tOwned[account];\\n            if (rBalance > rSupply || tBalance > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(rBalance);\\n            tSupply = tSupply.sub(tBalance);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n}\\n\",\"keccak256\":\"0x6552bde29342ef7518ff27c655fb3542aca0dca9872dd55f8324f9f8e61083ee\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x169d02c36bb73cf2ff63e1d38d7d23bb0a6004615bfa81ae56e6ee53632e6166\"},\"contracts/libraries/Set.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\n\\nlibrary Set {\\n    /// @title Set data structure\\n    /// @dev Supports `add`, `remove` and `has` methods. Use `values` property to iterate over values. Do not edit properties directly.\\n    struct AddressSet {\\n        address[] values;\\n        mapping(address => uint256) _valueIndexPlusOne;\\n    }\\n\\n    /// @dev Adds a value to the set.\\n    /// @return `true` if the value was successfully added; `false` if the value was already in the set.\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (set._valueIndexPlusOne[value] != 0) {\\n            return false;\\n        }\\n\\t\\tset.values.push(value);\\n\\t\\tset._valueIndexPlusOne[value] = set.values.length;  // length == last_index + 1\\n        return true;\\n    }\\n\\n    /// @dev Removes a value from the set.\\n    /// @return `true` if value was successfully removed; `false` if the value was not in the set.\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        if (set._valueIndexPlusOne[value] == 0) {\\n            return false;\\n        }\\n        uint256 valueToRemoveIndexPlusOne = set._valueIndexPlusOne[value];\\n        uint256 lastValueIndex = set.values.length - 1;\\n\\n        // Swap indices\\n        set._valueIndexPlusOne[set.values[lastValueIndex]] = valueToRemoveIndexPlusOne;\\n        delete set._valueIndexPlusOne[value];\\n\\n        // Move the last value to the deleted spot\\n        set.values[valueToRemoveIndexPlusOne - 1] = set.values[lastValueIndex];\\n\\n        // Delete the duplicated last value\\n        set.values.pop();\\n        return true;\\n    }\\n\\n    /// @dev Checks if a value is in the set.\\n    /// @return `true` if the value is in the set; `false` if the value is not in the set.\\n    function has(AddressSet storage set, address value) internal view returns (bool) {\\n        return set._valueIndexPlusOne[value] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37da22969b29551037c18ad7046c5634875be6832b7da33bcb2ea055f7983ede\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103c55760003560e01c80636042f719116101ff578063aea1f8031161011a578063e9d4eacc116100ad578063f2fde38b1161007c578063f2fde38b14610aef578063f84354f114610b15578063f8d5d46914610b3b578063fda493c914610b43576103c5565b8063e9d4eacc14610a73578063ec276f8514610a93578063ec9c273514610ac1578063f2cc0c1814610ac9576103c5565b8063cba0e996116100e9578063cba0e996146109ee578063cd3293de14610a14578063dd62ed3e14610a1c578063de53fcd514610a4a576103c5565b8063aea1f80314610982578063baa97acc146109b0578063be1c414c146109de578063c3574525146109e6576103c5565b80638da5cb5b116101925780639f4ba0ee116101615780639f4ba0ee146108e7578063a457c2d714610904578063a9059cbb14610930578063addb0cb71461095c576103c5565b80638da5cb5b146108a957806394a1404a146108b157806395d89b41146108d75780639badc365146108df576103c5565b80637337c7a6116101ce5780637337c7a61461083d57806383f74ba714610845578063887944431461084d5780638c71072e1461087b576103c5565b80636042f719146107e157806360ba1c3e146107e957806370a082311461080f578063715018a614610835576103c5565b80632993da12116102ef57806342966c6811610282578063504d275111610251578063504d27511461075f578063548743c81461078d5780635cce86cd146107955780635f91331e146107bb576103c5565b806342966c68146106e75780634549b0391461070457806349bd5a5e146107295780634ab9c15e14610731576103c5565b8063342e11af116102be578063342e11af14610635578063395093511461068d5780633c11e12a146106b95780633c9f861d146106df576103c5565b80632993da12146105cc5780632d838119146105f2578063311028af1461060f578063313ce56714610617576103c5565b806318160ddd1161036757806323b872dd1161033657806323b872dd146105625780632630c12f1461059857806327345b1b146105bc57806328b13b61146105c4576103c5565b806318160ddd146105135780631b8676f51461051b5780631d0806ae14610552578063220f66961461055a576103c5565b8063095ea7b3116103a3578063095ea7b3146104805780630e6d2f0b146104c05780630f569dad146104ee57806313114a9d1461050b576103c5565b806301a6c43b146103ca578063053ab182146103e457806306fdde0314610403575b600080fd5b6103d2610b4b565b60408051918252519081900360200190f35b610401600480360360208110156103fa57600080fd5b5035610b51565b005b61040b610c30565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561044557818101518382015260200161042d565b50505050905090810190601f1680156104725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104ac6004803603604081101561049657600080fd5b506001600160a01b038135169060200135610cc7565b604080519115158252519081900360200190f35b610401600480360360408110156104d657600080fd5b506001600160801b0381358116916020013516610ce5565b6104016004803603602081101561050457600080fd5b5035610e08565b6103d2610e65565b6103d2610e6b565b610523610e71565b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6103d2610e8b565b6104ac610e91565b6104ac6004803603606081101561057857600080fd5b506001600160a01b03813581169160208101359091169060400135610e9a565b6105a0610f22565b604080516001600160a01b039092168252519081900360200190f35b610523610f31565b6103d2610f4b565b610401600480360360208110156105e257600080fd5b50356001600160a01b0316610f8b565b6103d26004803603602081101561060857600080fd5b50356110e5565b6103d2611147565b61061f611157565b6040805160ff9092168252519081900360200190f35b61063d61115c565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610679578181015183820152602001610661565b505050509050019250505060405180910390f35b6104ac600480360360408110156106a357600080fd5b506001600160a01b0381351690602001356111c0565b6104ac600480360360208110156106cf57600080fd5b50356001600160a01b031661120e565b6103d261121b565b6104ac600480360360208110156106fd57600080fd5b5035611238565b6103d26004803603604081101561071a57600080fd5b50803590602001351515611253565b6105a06112e5565b6104016004803603604081101561074757600080fd5b506001600160801b03813581169160200135166112f4565b6104016004803603604081101561077557600080fd5b506001600160801b03813581169160200135166113ca565b610523611466565b6104ac600480360360208110156107ab57600080fd5b50356001600160a01b0316611480565b6103d2600480360360208110156107d157600080fd5b50356001600160a01b031661148d565b61052361149f565b6104ac600480360360208110156107ff57600080fd5b50356001600160a01b03166114b9565b6103d26004803603602081101561082557600080fd5b50356001600160a01b03166114c6565b610401611528565b6105236115ca565b6105236115e4565b6104016004803603604081101561086357600080fd5b506001600160a01b03813516906020013515156115fe565b6104016004803603604081101561089157600080fd5b506001600160a01b038135169060200135151561167d565b6105a06116f1565b610401600480360360208110156108c757600080fd5b50356001600160a01b0316611700565b61040b61177a565b61063d6117db565b610401600480360360208110156108fd57600080fd5b503561183b565b6104ac6004803603604081101561091a57600080fd5b506001600160a01b038135169060200135611898565b6104ac6004803603604081101561094657600080fd5b506001600160a01b038135169060200135611900565b6103d26004803603602081101561097257600080fd5b50356001600160a01b0316611914565b6104016004803603604081101561099857600080fd5b506001600160801b0381358116916020013516611926565b610401600480360360408110156109c657600080fd5b506001600160801b03813581169160200135166119fc565b610523611ad2565b610523611aec565b6104ac60048036036020811015610a0457600080fd5b50356001600160a01b0316611b06565b6105a0611b24565b6103d260048036036040811015610a3257600080fd5b506001600160a01b0381358116916020013516611b33565b610a52611b5e565b60405180826001811115610a6257fe5b815260200191505060405180910390f35b61040160048036036020811015610a8957600080fd5b503560ff16611b6c565b61040160048036036040811015610aa957600080fd5b506001600160a01b0381351690602001351515611be7565b610523611c8f565b61040160048036036020811015610adf57600080fd5b50356001600160a01b0316611ca9565b61040160048036036020811015610b0557600080fd5b50356001600160a01b0316611e19565b61040160048036036020811015610b2b57600080fd5b50356001600160a01b0316611f11565b61063d6120b8565b61063d61211b565b600b5481565b6000610b5b612491565b6001600160a01b03811660009081526004602052604090205490915060ff1615610bb65760405162461bcd60e51b815260040180806020018281038252603a8152602001806135a4603a913960400191505060405180910390fd5b6000610bc482600085612495565b5050506001600160a01b038616600090815260016020526040902054939450610bf29392508491505061244f565b6001600160a01b038316600090815260016020526040902055600754610c18908261244f565b600755600854610c2890846124f7565b600855505050565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610cbc5780601f10610c9157610100808354040283529160200191610cbc565b820191906000526020600020905b815481529060010190602001808311610c9f57829003601f168201915b505050505090505b90565b6000610cdb610cd4612491565b8484612551565b5060015b92915050565b610ced612491565b6000546001600160a01b03908116911614610d3d576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b610d47828261217e565b8051600d80546020938401516001600160801b03199091166001600160801b03938416178316600160801b91841682021791829055604080518082018252600e548086168252839004851681870152815180830190925283851682529190920490921692810192909252610dbb919061263d565b610e04576040805162461bcd60e51b8152602060048201526015602482015274098cac8ced2e8f27440cccaca40e8dede40d0d2ced605b1b604482015290519081900360640190fd5b5050565b610e10612491565b6000546001600160a01b03908116911614610e60576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b600b55565b60085490565b60065490565b600e546001600160801b0380821691600160801b90041682565b60215481565b600c5460ff1681565b6000610ea7848484612683565b610f1784610eb3612491565b610f12856040518060600160405280602f8152602001613575602f91396001600160a01b038a16600090815260036020526040812090610ef1612491565b6001600160a01b03168152602081019190915260400160002054919061282f565b612551565b5060015b9392505050565b6020546001600160a01b031681565b6012546001600160801b0380821691600160801b90041682565b6000610f86610f58610e6b565b60408051808201909152601d546001600160801b038082168352600160801b909104166020820152906128c6565b905090565b610f93612491565b6000546001600160a01b03908116911614610fe3576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b601f80546001600160a01b0319166001600160a01b0383811691909117918290556110109116600161167d565b601f54611027906001600160a01b031660016115fe565b601f5461103c906001600160a01b0316611ca9565b601f60009054906101000a90046001600160a01b03166001600160a01b03166349bd5a5e6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561108c57600080fd5b505af11580156110a0573d6000803e3d6000fd5b505050506040513d60208110156110b657600080fd5b5051601e80546001600160a01b0319166001600160a01b0392831617908190556110e291166001611be7565b50565b60006007548211156111285760405162461bcd60e51b81526004018080602001828103825260388152602001806133186038913960400191505060405180910390fd5b60006111326128ff565b905061113e8382612268565b9150505b919050565b6b08eb04bbcd9161efc800000081565b601290565b60606017600001805480602002602001604051908101604052809291908181526020018280548015610cbc57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611199575050505050905090565b6000610cdb6111cd612491565b84610f1285600360006111de612491565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906124f7565b6000610cdf601583612922565b6000611225610e6b565b6b08eb04bbcd9161efc800000003905090565b600061124b611245612491565b83612943565b506001919050565b60006006548311156112965760405162461bcd60e51b815260040180806020018281038252602d8152602001806133fc602d913960400191505060405180910390fd5b60006112a0612491565b9050826112c65760006112b582600087612495565b50949750610cdf9650505050505050565b60006112d482600087612495565b50939750610cdf9650505050505050565b601e546001600160a01b031681565b6112fc612491565b6000546001600160a01b0390811691161461134c576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b611356828261217e565b8051601380546020938401516001600160801b03199091166001600160801b03938416178316600160801b918416820217918290556040805180820182526014548086168252839004851681870152815180830190925283851682529190920490921692810192909252610dbb919061263d565b6113d2612491565b6000546001600160a01b03908116911614611422576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b61142c828261217e565b8051601d80546020909301516001600160801b03908116600160801b029281166001600160801b0319909416939093179092161790555050565b6014546001600160801b0380821691600160801b90041682565b6000610cdf601983612922565b601c6020526000908152604090205481565b6011546001600160801b0380821691600160801b90041682565b6000610cdf601783612922565b6001600160a01b03811660009081526004602052604081205460ff161561150657506001600160a01b038116600090815260026020526040902054611142565b6001600160a01b038216600090815260016020526040902054610cdf906110e5565b611530612491565b6000546001600160a01b03908116911614611580576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6013546001600160801b0380821691600160801b90041682565b6010546001600160801b0380821691600160801b90041682565b611606612491565b6000546001600160a01b03908116911614611656576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b801561166d576116676019836122aa565b50610e04565b61167860198361231a565b505050565b611685612491565b6000546001600160a01b039081169116146116d5576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b80156116e6576116676017836122aa565b61167860178361231a565b6000546001600160a01b031690565b611708612491565b6000546001600160a01b03908116911614611758576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b602080546001600160a01b0319166001600160a01b0392909216919091179055565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610cbc5780601f10610c9157610100808354040283529160200191610cbc565b60606005805480602002602001604051908101604052809291908181526020018280548015610cbc576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611199575050505050905090565b611843612491565b6000546001600160a01b03908116911614611893576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b602155565b6000610cdb6118a5612491565b84610f12856040518060600160405280602c81526020016134ad602c9139600360006118cf612491565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061282f565b6000610cdb61190d612491565b8484612683565b601b6020526000908152604090205481565b61192e612491565b6000546001600160a01b0390811691161461197e576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b611988828261217e565b8051601180546020938401516001600160801b03199091166001600160801b03938416178316600160801b918416820217918290556040805180820182526012548086168252839004851681870152815180830190925283851682529190920490921692810192909252610dbb919061263d565b611a04612491565b6000546001600160a01b03908116911614611a54576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b611a5e828261217e565b8051600f80546020938401516001600160801b03199091166001600160801b03938416178316600160801b918416820217918290556040805180820182526010548086168252839004851681870152815180830190925283851682529190920490921692810192909252610dbb919061263d565b600d546001600160801b0380821691600160801b90041682565b601d546001600160801b0380821691600160801b90041682565b6001600160a01b031660009081526004602052604090205460ff1690565b601f546001600160a01b031681565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600c54610100900460ff1681565b611b74612491565b6000546001600160a01b03908116911614611bc4576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b600c805482919061ff001916610100836001811115611bdf57fe5b021790555050565b611bef612491565b6000546001600160a01b03908116911614611c3f576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b8015611c6c57611c506015836122aa565b50611c5a82611b06565b611c6757611c6782611ca9565b610e04565b611c7760158361231a565b50611c8182611b06565b15610e0457610e0482611f11565b600f546001600160801b0380821691600160801b90041682565b611cb1612491565b6000546001600160a01b03908116911614611d01576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526004602052604090205460ff1615611d595760405162461bcd60e51b81526004018080602001828103825260298152602001806133d36029913960400191505060405180910390fd5b6001600160a01b03811660009081526001602052604090205415611db3576001600160a01b038116600090815260016020526040902054611d99906110e5565b6001600160a01b0382166000908152600260205260409020555b6001600160a01b03166000818152600460205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319169091179055565b611e21612491565b6000546001600160a01b03908116911614611e71576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b6001600160a01b038116611eb65760405162461bcd60e51b81526004018080602001828103825260268152602001806133506026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b611f19612491565b6000546001600160a01b03908116911614611f69576040805162461bcd60e51b81526020600482018190526024820152600080516020613503833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526004602052604090205460ff16611fc05760405162461bcd60e51b81526004018080602001828103825260298152602001806135236029913960400191505060405180910390fd5b60005b600554811015610e0457816001600160a01b031660058281548110611fe457fe5b6000918252602090912001546001600160a01b031614156120b05760058054600019810190811061201157fe5b600091825260209091200154600580546001600160a01b03909216918390811061203757fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559184168152600282526040808220829055600490925220805460ff19169055600580548061208957fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610e04565b600101611fc3565b60606019600001805480602002602001604051908101604052809291908181526020018280548015610cbc576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611199575050505050905090565b60606015600001805480602002602001604051908101604052809291908181526020018280548015610cbc576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611199575050505050905090565b612186613300565b816001600160801b0316836001600160801b031611156121ed576040805162461bcd60e51b815260206004820152601b60248201527f50657263656e743a20696e76616c69642070657263656e746167650000000000604482015290519081900360640190fd5b50604080518082019091526001600160801b0392831681529116602082015290565b60008261221e57506000610cdf565b8282028284828161222b57fe5b0414610f1b5760405162461bcd60e51b81526004018080602001828103825260218152602001806134606021913960400191505060405180910390fd5b6000610f1b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612a89565b6001600160a01b0381166000908152600183016020526040812054156122d257506000610cdf565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6001600160a01b038116600090815260018301602052604081205461234157506000610cdf565b6001600160a01b0382166000908152600184016020819052604082205485549092600019820192849290919088908590811061237957fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220949094559187168252600188019092529081205584548590829081106123c457fe5b60009182526020909120015485546001600160a01b0390911690869060001985019081106123ee57fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055845485908061242257fe5b600082815260209020600019908201810180546001600160a01b0319169055019055506001949350505050565b6000610f1b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061282f565b3390565b6000806000806000806000806000806124af8d8d8d612aee565b9250925092506000806000806124c68f8787612b36565b9350935093509350838383838a8a8a9d509d509d509d509d509d509d50505050505050509397509397509397909450565b600082820183811015610f1b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b0383166125965760405162461bcd60e51b815260040180806020018281038252602b8152602001806133a8602b913960400191505060405180910390fd5b6001600160a01b0382166125db5760405162461bcd60e51b815260040180806020018281038252602981526020018061354c6029913960400191505060405180910390fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6020820151815160009161265d916001600160801b03908116911661220f565b6020830151845161267a916001600160801b03918216911661220f565b11159392505050565b61268c83611480565b15801561269d575061269d8261120e565b15612745576001600160a01b0383166000908152601c6020526040812054610258906126ca90429061244f565b11156126f0576001600160a01b0384166000908152601c6020526040902042905561270b565b506001600160a01b0383166000908152601b60205260409020545b61271581836124f7565b905061271f610f4b565b81111561272b57600080fd5b6001600160a01b0384166000908152601b60205260409020555b6020546001600160a01b0316156127c5576020805460408051630c88b75360e01b815290516001600160a01b0390921692630c88b753926004808401938290030181600087803b15801561279857600080fd5b505af11580156127ac573d6000803e3d6000fd5b505050506040513d60208110156127c257600080fd5b50505b60006127d0306114c6565b600b549091508082108015906127e95750600c5460ff16155b80156128035750601e546001600160a01b03868116911614155b1561281d5780821115612814578091505b61281d82612b96565b612828858585612d08565b5050505050565b600081848411156128be5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561288357818101518382015260200161286b565b50505050905090810190601f1680156128b05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000610f1b83602001516001600160801b03166128f985600001516001600160801b03168561220f90919063ffffffff16565b90612268565b600080600061290c612f9b565b909250905061291b8282612268565b9250505090565b6001600160a01b031660009081526001919091016020526040902054151590565b60006129576129506128ff565b839061220f565b905061299681604051806060016040528060328152602001613376603291396001600160a01b038616600090815260016020526040902054919061282f565b6001600160a01b03841660009081526001602090815260408083209390935560049052205460ff1615612a1a57612a0082604051806060016040528060328152602001613376603291396001600160a01b038616600090815260026020526040902054919061282f565b6001600160a01b0384166000908152600260205260409020555b600754612a27908261244f565b600755600654612a37908361244f565b6006556000612a44612491565b6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050565b60008183612ad85760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561288357818101518382015260200161286b565b506000838581612ae457fe5b0495945050505050565b600080600080612aff878787613078565b90506000612b0e8888886130dd565b90506000612b2682612b20898661244f565b9061244f565b9992985090965090945050505050565b6000806000806000612b466128ff565b90506000612b54898361220f565b90506000612b62898461220f565b90506000612b70898561220f565b90506000612b8282612b20868661244f565b939c939b5091995097509095505050505050565b600c805460ff19166001179055601f54612bbb9030906001600160a01b031683612683565b6000600c54610100900460ff166001811115612bd357fe5b1415612c4357601f546040805163173865ad60e01b81526004810184905290516001600160a01b039092169163173865ad9160248082019260009290919082900301818387803b158015612c2657600080fd5b505af1158015612c3a573d6000803e3d6000fd5b50505050612cfb565b6001600c54610100900460ff166001811115612c5b57fe5b1415612cae57601f546040805163255f796d60e21b81526004810184905290516001600160a01b039092169163957de5b49160248082019260009290919082900301818387803b158015612c2657600080fd5b6040805162461bcd60e51b815260206004820152601f60248201527f4c6564676974793a20696e76616c69642066656544657374696e6174696f6e00604482015290519081900360640190fd5b50600c805460ff19169055565b6001600160a01b038316612d4d5760405162461bcd60e51b815260040180806020018281038252602c815260200180613481602c913960400191505060405180910390fd5b6001600160a01b038216612d925760405162461bcd60e51b815260040180806020018281038252602a8152602001806134d9602a913960400191505060405180910390fd5b60008111612dd15760405162461bcd60e51b81526004018080602001828103825260378152602001806134296037913960400191505060405180910390fd5b6000806000806000806000612de78a8a8a612495565b9650965096509650965096509650612e2d87600160008d6001600160a01b03166001600160a01b031681526020019081526020016000205461244f90919063ffffffff16565b6001600160a01b038b1660009081526001602090815260408083209390935560049052205460ff1615612e97576001600160a01b038a16600090815260026020526040902054612e7d908961244f565b6001600160a01b038b166000908152600260205260409020555b6001600160a01b038916600090815260016020526040902054612eba90876124f7565b6001600160a01b038a1660009081526001602090815260408083209390935560049052205460ff1615612f24576001600160a01b038916600090815260026020526040902054612f0a90846124f7565b6001600160a01b038a166000908152600260205260409020555b8115612f3457612f3485836131d0565b8015612f4457612f4484826131f4565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a350505050505050505050565b60075460065460055460009283929091835b8181101561304457600060058281548110612fc457fe5b60009182526020808320909101546001600160a01b031680835260018252604080842054600290935290922054919250908682118061300257508581115b1561301d576007546006549850985050505050505050613074565b613027878361244f565b9650613033868261244f565b95505060019092019150612fad9050565b5060065460075461305491612268565b83101561306d5760075460065494509450505050613074565b5090925090505b9091565b60006130838361120e565b80156130955750613093846114b9565b155b156130d357604080518082019091526011546001600160801b038082168352600160801b9091041660208201526130cc90836128c6565b9050610f1b565b5060009392505050565b60006130e88461120e565b80156130fa57506130f8836114b9565b155b1561313157604080518082019091526013546001600160801b038082168352600160801b9091041660208201526130cc90836128c6565b61313a8361120e565b801561314c575061314a846114b9565b155b156130d35760215461315f90600a61220f565b613167613260565b1061319e5760408051808201909152600d546001600160801b038082168352600160801b9091041660208201526130cc90836128c6565b60408051808201909152600f546001600160801b038082168352600160801b9091041660208201526130cc90836128c6565b6007546131dd908361244f565b6007556008546131ed90826124f7565b6008555050565b3060009081526001602052604090205461320e90836124f7565b3060009081526001602090815260408083209390935560049052205460ff1615610e04573060009081526002602052604090205461324c90826124f7565b306000908152600260205260409020555050565b6020546000906001600160a01b031661327b57506000610cc4565b6020805460408051633ddac95360e01b8152306004820152670de0b6b3a7640000602482015290516001600160a01b0390921692633ddac95392604480840193829003018186803b1580156132cf57600080fd5b505afa1580156132e3573d6000803e3d6000fd5b505050506040513d60208110156132f957600080fd5b5051905090565b60408051808201909152600080825260208201529056fe5265666c656374546f6b656e3a20616d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735265666c656374546f6b656e3a206275726e20616d6f756e74206973206d6f7265207468616e207468652062616c616e63655265666c656374546f6b656e3a20617070726f76652066726f6d20746865207a65726f20616464726573735265666c656374546f6b656e3a206163636f756e7420697320616c7265616479206578636c756465645265666c656374546f6b656e3a20616d6f756e74206d757374206265206c657373207468616e20737570706c795265666c656374546f6b656e3a207472616e7366657220616d6f756e74206d7573742062652067726561746572207468616e207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775265666c656374546f6b656e3a207472616e736665722066726f6d20746865207a65726f20616464726573735265666c656374546f6b656e3a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f5265666c656374546f6b656e3a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725265666c656374546f6b656e3a206163636f756e7420697320616c726561647920696e636c756465645265666c656374546f6b656e3a20617070726f766520746f20746865207a65726f20616464726573735265666c656374546f6b656e3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655265666c656374546f6b656e3a206578636c75646564206164647265737365732063616e6e6f742063616c6c20746869732066756e6374696f6ea2646970667358221220a3c43d27e7de4059909e2cdf3b9db6036ec4f92d0fafa8781298649e2366dd1a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4603,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4813,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_rOwned",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4817,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_tOwned",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4823,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4827,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_isExcluded",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4830,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_excluded",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4835,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_tTotal",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4837,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_rTotal",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4839,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_tFeeTotal",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4841,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 4843,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 1363,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "numTokensToSwap",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1365,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "inSwapAndLiquify",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1372,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "feeDestination",
        "offset": 1,
        "slot": "12",
        "type": "t_enum(FeeDestination)1368"
      },
      {
        "astId": 1379,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "sellAccumulationFee",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Percent)4715_storage"
      },
      {
        "astId": 1382,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "initialSellAccumulationFee",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Percent)4715_storage"
      },
      {
        "astId": 1391,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "sellAtSmallPriceAccumulationFee",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Percent)4715_storage"
      },
      {
        "astId": 1394,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "initialSellAtSmallPriceAccumulationFee",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(Percent)4715_storage"
      },
      {
        "astId": 1401,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "sellReflectionFee",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(Percent)4715_storage"
      },
      {
        "astId": 1404,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "initialSellReflectionFee",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(Percent)4715_storage"
      },
      {
        "astId": 1411,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "buyAccumulationFee",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(Percent)4715_storage"
      },
      {
        "astId": 1414,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "initialBuyAccumulationFee",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(Percent)4715_storage"
      },
      {
        "astId": 1416,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_dexes",
        "offset": 0,
        "slot": "21",
        "type": "t_struct(AddressSet)6299_storage"
      },
      {
        "astId": 1418,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_excludedFromDexFee",
        "offset": 0,
        "slot": "23",
        "type": "t_struct(AddressSet)6299_storage"
      },
      {
        "astId": 1420,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "_excludedFromLimits",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(AddressSet)6299_storage"
      },
      {
        "astId": 1424,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "soldPerPeriod",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1428,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "firstSellAt",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1435,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "maxTransactionSizePercent",
        "offset": 0,
        "slot": "29",
        "type": "t_struct(Percent)4715_storage"
      },
      {
        "astId": 1437,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "30",
        "type": "t_contract(IUniswapV2Pair)4177"
      },
      {
        "astId": 1439,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "reserve",
        "offset": 0,
        "slot": "31",
        "type": "t_contract(IReserve)3872"
      },
      {
        "astId": 1441,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "priceOracle",
        "offset": 0,
        "slot": "32",
        "type": "t_contract(ILedgityPriceOracle)3773"
      },
      {
        "astId": 1443,
        "contract": "contracts/Ledgity.sol:Ledgity",
        "label": "initialPrice",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILedgityPriceOracle)3773": {
        "encoding": "inplace",
        "label": "contract ILedgityPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IReserve)3872": {
        "encoding": "inplace",
        "label": "contract IReserve",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)4177": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_enum(FeeDestination)1368": {
        "encoding": "inplace",
        "label": "enum Ledgity.FeeDestination",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)6299_storage": {
        "encoding": "inplace",
        "label": "struct Set.AddressSet",
        "members": [
          {
            "astId": 6294,
            "contract": "contracts/Ledgity.sol:Ledgity",
            "label": "values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6298,
            "contract": "contracts/Ledgity.sol:Ledgity",
            "label": "_valueIndexPlusOne",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Percent)4715_storage": {
        "encoding": "inplace",
        "label": "struct Percent.Percent",
        "members": [
          {
            "astId": 4712,
            "contract": "contracts/Ledgity.sol:Ledgity",
            "label": "numerator",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 4714,
            "contract": "contracts/Ledgity.sol:Ledgity",
            "label": "denominator",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}